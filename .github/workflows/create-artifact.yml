name: Deploy Itemboard to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Django App
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        # env:
        #   DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        #   DJANGO_SETTINGS_MODULE: config.settings.test
        run: |
          python itemboard/manage.py test

  build-and-create-artifact:

    name: Build and Create artifact
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Get project version
        id: project-version
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat CHANGELOG.md | head -n 1)
          else
            # Fallback to using date-based version if no VERSION file
            VERSION=$(date +'%Y.%m.%d.%H%M')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Retrieved version: $VERSION"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          VERSION: ${{ steps.project-version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
      
      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
      #                            --service ${{ secrets.ECS_SERVICE }} \
      #                            --force-new-deployment